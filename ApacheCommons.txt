Apache Commons is a project under the Apache Software Foundation that provides a collection of reusable, open-source Java libraries. These libraries are designed to simplify and enhance Java development by offering tools and utilities for common programming tasks. Apache Commons libraries are widely used in Java projects because of their reliability, ease of use, and widespread adoption in the Java community.

Key Features of Apache Commons
Apache Commons is not a single library; it’s a collection of subprojects, each focusing on specific areas of functionality. These libraries help developers avoid “reinventing the wheel” by providing ready-made implementations for common tasks such as file manipulation, collections utilities, string operations, and more.

Common Apache Commons Libraries
Here are some of the most popular libraries under Apache Commons:

1. Apache Commons Lang
Provides utilities for working with core Java classes like String, Date, Number, and Object.
Enhances the standard Java classes with additional methods and features.
Examples:
StringUtils: Utilities for handling strings (e.g., checking for empty strings, reversing strings).
NumberUtils: Utilities for working with numbers.
Example:
java
import org.apache.commons.lang3.StringUtils;

public class Example {
    public static void main(String[] args) {
        String str = "Apache Commons Lang";
        System.out.println(StringUtils.reverse(str)); // Output: gnaL snommoC ehcapA
    }
}
2. Apache Commons IO
Provides utilities for input/output operations, such as file handling and stream manipulation.
Features include:
File filters (e.g., filter files by extension).
File copying, reading, and writing utilities.
Example:
java
import org.apache.commons.io.FileUtils;
import java.io.File;
import java.io.IOException;

public class Example {
    public static void main(String[] args) throws IOException {
        File file = new File("example.txt");
        FileUtils.writeStringToFile(file, "Hello, Apache Commons IO!", "UTF-8");
        System.out.println(FileUtils.readFileToString(file, "UTF-8"));
    }
}
3. Apache Commons Collections
Provides additional functionality for working with Java collections (e.g., List, Map, Set).
Includes specialized collections, enhanced iterators, and utilities for manipulating collections.
Example:
java
import org.apache.commons.collections4.CollectionUtils;
import java.util.Arrays;
import java.util.List;

public class Example {
    public static void main(String[] args) {
        List<Integer> list1 = Arrays.asList(1, 2, 3);
        List<Integer> list2 = Arrays.asList(3, 4, 5);

        // Find the intersection of two lists
        List<Integer> intersection = CollectionUtils.intersection(list1, list2);
        System.out.println(intersection); // Output: [3]
    }
}
4. Apache Commons BeanUtils
Simplifies working with Java beans and properties.
Provides utilities for copying properties between beans, converting data types, and more.
Example:
java
import org.apache.commons.beanutils.BeanUtils;
import java.util.HashMap;
import java.util.Map;

public class Example {
    public static void main(String[] args) throws Exception {
        Person person = new Person();
        Map<String, String> properties = new HashMap<>();
        properties.put("name", "John");
        properties.put("age", "30");

        // Populate bean properties from a map
        BeanUtils.populate(person, properties);
        System.out.println(person.getName()); // Output: John
        System.out.println(person.getAge());  // Output: 30
    }
}

class Person {
    private String name;
    private int age;

    public String getName() { return name; }
    public void setName(String name) { this.name = name; }

    public int getAge() { return age; }
    public void setAge(int age) { this.age = age; }
}
5. Apache Commons Math
Provides tools for mathematical operations, statistics, and numerical analysis.
Includes features like matrix manipulation, complex numbers, and statistical distributions.
6. Apache Commons CLI
A library for parsing command-line arguments in Java applications.
Simplifies handling command-line options and arguments.
Example:
java
import org.apache.commons.cli.*;

public class Example {
    public static void main(String[] args) {
        Options options = new Options();
        options.addOption("h", "help", false, "Display help");

        CommandLineParser parser = new DefaultParser();
        try {
            CommandLine cmd = parser.parse(options, args);
            if (cmd.hasOption("h")) {
                System.out.println("Help option selected");
            }
        } catch (ParseException e) {
            e.printStackTrace();
        }
    }
}
7. Apache Commons Codec
Provides utilities for encoding and decoding data, such as Base64, Hex, and MD5 hashing.
Example:
java
import org.apache.commons.codec.binary.Base64;

public class Example {
    public static void main(String[] args) {
        String original = "Hello, Apache Commons Codec!";
        String encoded = Base64.encodeBase64String(original.getBytes());
        System.out.println(encoded); // Output: SGVsbG8sIEFwYWNoZSBDb21tb25zIENvZGVjIQ==
    }
}
Why Use Apache Commons?
Reusable Code: Saves time by providing prebuilt solutions for common tasks.
Well-Tested: Libraries are rigorously tested and widely used in the Java community.
Active Development: Many libraries are actively maintained and updated.
Ease of Use: Provides intuitive APIs for solving problems with minimal effort.
How to Use Apache Commons in Your Project
Maven Dependency:
Add the appropriate dependency to your pom.xml based on the library you want to use. For example, to use Apache Commons Lang:

xml
<dependency>
    <groupId>org.apache.commons</groupId>
    <artifactId>commons-lang3</artifactId>
    <version>3.x.x</version>
</dependency>
Gradle Dependency:
Add the library to your build.gradle file:

gradle
implementation 'org.apache.commons:commons-lang3:3.x.x'
Popular Use Cases
String Manipulation: Using StringUtils from Commons Lang.
File Operations: Using Commons IO for file copying, reading, and writing.
Command-Line Parsing: Using Commons CLI to handle command-line arguments.
Collections Utilities: Using Commons Collections for advanced collection operations.
Data Encoding: Using Commons Codec for Base64 and other encoding schemes.